<?php

class PositionModel implements ModelInterface{
    public static function getAll() {
        $SQL = 'SELECT * FROM position;';
        $prep = DataBase::getInstance()->prepare($SQL);
        $res = $prep->execute();
        if ($res) {
            return $prep->fetchAll(PDO::FETCH_OBJ);
        } else {
            return [];
        }
    }
    
    public static function getAllPaged($page) {
        $page = max(0, $page);
        $first = $page * Configuration::ITEMS_PER_PAGE;
        $SQL = 'SELECT * FROM position ORDER BY `title` LIMIT ?, ?';
        $prep = DataBase::getInstance()->prepare($SQL);
        $res = $prep->execute([$first, Configuration::ITEMS_PER_PAGE]);
        if ($res) {
            return $prep->fetchAll(PDO::FETCH_OBJ);
        } else {
            return [];
        }
    }

    public static function getById($id) {
        $id = intval($id);
        $SQL = 'SELECT * FROM position WHERE position_id = ?;';
        $prep = DataBase::getInstance()->prepare($SQL);
        $res = $prep->execute([$id]);
        if ($res) {
            return $prep->fetch(PDO::FETCH_OBJ);
        } else {
            return null;
        }
    }
    
    public static function getLocationForPositionId($position_id){
        $id = intval($position_id);
        $SQL = 'SELECT location_id FROM position WHERE position_id = ?;';
        $prep = DataBase::getInstance()->prepare($SQL);
        $res = $prep->execute([$id]);
        if ($res) {
            return $prep->fetch(PDO::FETCH_OBJ);
        } else {
            return null;
        }
    }
    
    /*
     * Get a list of keywords for a given position - For a postion_id get a keyword_id array from position_keyword table
     * @param int position_id 
     * @return array
     */
    public static function getKeywordsforPositionId($position_id) {
        $id = intval($position_id);
        $SQL = 'SELECT * FROM position_keyword WHERE position_id = ?;';
        $prep = DataBase::getInstance()->prepare($SQL);
        $prep->execute([$id]);
        $res = $prep->fetch(PDO::FETCH_OBJ);
        $list = [];
        foreach ($list as $item) {
            $list[] = KeywordModel::getById($item->keyword_id);
        }
        return $list;
    }
    
     /*
     * Get all positions advertised for a location specified with location_id
      * @param int $id ID oglasa
      * @return array
     */
    
    public static function getPositionsByLocationId($id) {
        $id = intval($id);
        $SQL = 'SELECT * FROM position WHERE location_id = ?;';
        $prep = DataBase::getInstance()->prepare($SQL);
        $res = $prep->execute([$id]);
        if ($res) {
            return $prep->fetchAll(PDO::FETCH_OBJ);
        } else {
            return [];
        }
    }
    
    /*
     * metod koji vraca objekat sa podacima za oglas sa zadatim slugom
     * #param string $slug
     * @return stdClass
     */
    
    public static function getBySlug($slug) {
        $SQL = 'SELECT * FROM position WHERE slug = ?;';
        $prep = DataBase::getInstance()->prepare($SQL);
        $res = $prep->execute([$slug]);
        if ($res) {
            return $prep->fetch(PDO::FETCH_OBJ);
        } else {
            return [];
        }
    }
    
    /*
     * Adds a position to the database
     * Returns the ID of the position, or false if adding fails
     */
    public static function add($title, $slug, $description, $requirements, $responsibilities, $location_id) {
        $SQL = 'INSERT INTO position (title, slug, description, requirements, responsibilities, location_id) VALUES (?, ?, ?, ?, ?, ?)';
        $prep = DataBase::getInstance()->prepare($SQL);
        $res = $prep->execute([$title, $slug, $description, $requirements, $responsibilities, $location_id]);
        if ($res) {
            return DataBase::getInstance()->lastInsertId();
        } else {
          return false;  
        }
    }
    
        // @return boolean
    public static function edit($id, $title, $slug, $description, $requirements, $responsibilities, $location_id){
        $SQL = 'UPDATE  position SET title = ?, slug = ?, description = ?, requirements = ?, responsibilities = ?, location_id = ? WHERE position_id = ?;';
        $prep = DataBase::getInstance()->prepare($SQL);
        return $prep->execute([$title, $slug, $description, $requirements, $responsibilities, $location_id, $id]);
    }

    public static function addKeywordToPosition($position_id, $keyword_id) {
        $SQL = 'INSERT INTO position_keyword (position_id, keyword_id) VALUES (?, ?)';
        $prep = DataBase::getInstance()->prepare($SQL);
        return $prep->execute([$position_id, $keyword_id]);
    }
    
    public static function deleteAllKeywords($position_id) {
        $SQL = 'DELETE FROM position_keyword WHERE position_id = ?';
        $prep = DataBase::getInstance()->prepare($SQL);
        return $prep->execute([$position_id]);
    }
}

